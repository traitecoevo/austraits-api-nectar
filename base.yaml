heat_template_version: 2021-04-16

parameters:
    flavor:
        type: string
        default: "t3.xsmall"
        constraints:
        - custom_constraint: nova.flavor

    image:
        type: string
        default: "NeCTAR Ubuntu 20.04 LTS (Focal) amd64"

    host_port:
        type: number
        default: 80
        description: Port used by hosts

    lb_port:
        type: number
        default: 80
        description: Outward-facing port for load balancer

    public_network:
        type: string
        description: Public network for external traffic
        constraints:
        - custom_constraint: neutron.network

    instance_count:
        type: number
        description: How many API instances to create
        default: 2

    api_branch:
        type: string
        description: Branch of traitecoevo/austraits_api to use for deployment
        default: "master"

resources:
    network:
        type: OS::Neutron::Net

    router:
        type: OS::Neutron::Router
        properties:
            external_gateway_info: {"network": { get_param: public_network }}

    router_gateway:
        type: OS::Neutron::RouterGateway
        properties:
            router_id: { get_resource: router }
            network_id: { get_param: public_network }

    router_interface:
        type: OS::Neutron::RouterInterface
        properties:
            router: { get_resource: router }
            subnet: { get_resource: subnet }

    subnet:
        type: OS::Neutron::Subnet
        properties:
            dns_nameservers:
            - 1.1.1.1
            - 1.0.0.1
            network: { get_resource: network }
            ip_version: 4
            cidr: 192.168.13.0/24
            allocation_pools:
            - { start: 192.168.13.2, end: 192.168.13.126 }

    secgroup:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
            - remote_ip_prefix: 0.0.0.0/0
              port_range_min: { get_param: host_port }
              port_range_max: { get_param: host_port }
              protocol: tcp

    lb:
        type: OS::Octavia::LoadBalancer
        properties:
            vip_subnet: { get_resource: subnet }

    lb_listener:
        type: OS::Octavia::Listener
        properties:
            loadbalancer: { get_resource: lb }
            protocol: HTTP
            protocol_port: { get_param: lb_port }

    lb_pool:
        type: OS::Octavia::Pool
        properties:
            listener: { get_resource: lb_listener }
            lb_algorithm: ROUND_ROBIN
            protocol: HTTP

    lb_monitor:
        type: OS::Octavia::HealthMonitor
        depends_on: wait_condition
        properties:
            pool: { get_resource: lb_pool }
            delay: 20
            timeout: 10
            max_retries: 1
            type: TCP

    floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network: { get_param: public_network }
            port_id: { get_attr: [lb, vip_port_id] }

    wait_handle:
        type: OS::Heat::WaitConditionHandle

    wait_condition:
        type: OS::Heat::WaitCondition
        properties:
            handle: { get_resource: wait_handle }
            count: { get_param: instance_count }  # wait for all instances to report success
            timeout: 600

    asg:
        type: OS::Heat::AutoScalingGroup
        properties:
            min_size: { get_param: instance_count }
            max_size: { get_param: instance_count }
            desired_capacity: { get_param: instance_count }
            resource:
                type: server.yaml
                properties:
                    flavor: { get_param: flavor }
                    image: { get_param: image }
                    network: { get_resource: network }
                    subnet: { get_resource: subnet }
                    secgroup: { get_resource: secgroup }
                    wc_notify: { get_attr: ["wait_handle", "curl_cli"] }
                    pool: { get_resource: lb_pool }
                    host_port: { get_param: host_port }
                    api_branch: { get_param: api_branch }

outputs:
    lb_url:
        description: "Public-facing URL for load balancer"
        value:
            str_replace:
                template: http://$ipaddress:$port
                params:
                    $ipaddress: { get_attr: [ floating_ip, floating_ip_address ] }
                    $port: { get_param: lb_port }
