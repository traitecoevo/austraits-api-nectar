heat_template_version: 2021-04-16

parameters:
    keypair:
        type: string
        constraints:
        - custom_constraint: nova.keypair

    flavor:
        type: string
        default: "t3.small"
        constraints:
        - custom_constraint: nova.flavor

    image:
        type: string

    availability_zone:
        type: string
        default: "intersect"

    host_port:
        type: number
        default: 80
        description: Port used by hosts

    api_branch:
        type: string
        description: Branch of traitecoevo/austraits_api to use for deployment
        default: "master"

    logstash_flavor:
        type: string
        constraints:
        - custom_constraint: nova.flavor
        default: "t3.xsmall"

    logstash_image:
        type: string

resources:
    secgroup:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
            - remote_ip_prefix: 0.0.0.0/0
              port_range_min: { get_param: host_port }
              port_range_max: { get_param: host_port }
              protocol: tcp
            - remote_ip_prefix: 0.0.0.0/0
              protocol: tcp
              port_range_min: 22
              port_range_max: 22

    logstash_secgroup:
        type: OS::Neutron::SecurityGroup
        properties:
            rules:
            - remote_group_id: { get_resource: secgroup }
              remote_mode: remote_group_id
              protocol: tcp
              port_range_min: 5044
              port_range_max: 5044

    wait_handle:
        type: OS::Heat::WaitConditionHandle

    wait_condition:
        type: OS::Heat::WaitCondition
        properties:
            handle: { get_resource: wait_handle }
            count: 2
            timeout: 600

    cloud_init:
        type: cloud-init.yaml
        properties:
            logstash_host: { get_attr: [ logstash_server, first_address ] }
            api_branch: { get_param: api_branch }
            wc_notify: { get_attr: ["wait_handle", "curl_cli"] }
            environment: { get_param: OS::stack_name }

    server:
        type: OS::Nova::Server
        properties:
            key_name: { get_param: keypair }
            flavor: { get_param: flavor }
            image: { get_param: image }
            availability_zone: { get_param: availability_zone }
            networks:
            - allocate_network: auto
            security_groups:
            - { get_resource: secgroup }

            user_data_format: SOFTWARE_CONFIG
            user_data:
                get_attr: [cloud_init, cloud_config]

    logstash_cloud_init:
        type: logstash/cloud-init.yaml
        properties:
            bucket: { get_resource: log_bucket }
            wc_notify: { get_attr: ["wait_handle", "curl_cli"] }

    logstash_server:
        type: OS::Nova::Server
        properties:
            flavor: { get_param: logstash_flavor }
            image: { get_param: logstash_image }
            availability_zone: { get_param: availability_zone }
            networks:
            - allocate_network: auto
            security_groups:
            - { get_resource: logstash_secgroup }

            user_data_format: SOFTWARE_CONFIG
            user_data:
                get_attr: [ logstash_cloud_init, cloud_config ]

    random_string:
        type: OS::Heat::RandomString
        properties:
            length: 16

    log_bucket:
        type: OS::Swift::Container
        properties:
            name: { list_join: ["-", ["austraits-api-logs", { get_param: OS::stack_name }, { get_resource: random_string }] ]}
        deletion_policy: retain

outputs:
    ip_address:
        description: IP address of the deployed instance
        value: { get_attr: [server, first_address] }

    log_bucket:
        value: { get_resource: log_bucket }
